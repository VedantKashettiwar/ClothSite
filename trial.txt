const aggregateBasedOnCustomers = async (req, res) => {
  try {
    const result = await Orders.aggregate([
      {
        $lookup: {
          from: "payments",
          localField: "pay_id",
          foreignField: "_id",
          as: "status",
        },
      },
      {
        $lookup: {
          from: "customer_infos",
          localField: "cid",
          foreignField: "_id",
          as: "customer",
        },
      },
      { $unwind: "$status" },
      { $unwind: "$customer" },
      {
        $project: {
          _id: 0,
          "customer.name": 1,
          "status.cid": 1,
          "status.total": 1,
          "status.pay_status": 1,
        },
      },
      {
        $addFields: {
          CustomerID: "$status.cid",
          CustomerName: "$customer.name",
          Amount: "$status.total",
          Status: "$status.pay_status",
        },
      },
      { $project: { status: 0, customer: 0 } },
      {
        $group: {
          _id: {
            CustomerID: "$CustomerID",
            CustomerName: "$CustomerName",
            Status: "$Status",
          },
          Amount: { $sum: "$Amount" },
        },
      },
      {
        $project: {
          _id: 0,
          CustomerID: "$_id.CustomerID",
          CustomerName: "$_id.CustomerName",
          Status: "$_id.Status",
          Amount: 1,
        },
      },

      {
        $group: {
          _id: { CustomerID: "$CustomerID", CustomerName: "$CustomerName" },
          S_Paid: {
            $push: {
              $cond: [
                { $eq: ["$Status", "Paid"] },
                { Paid: "$Amount" },
                "$$REMOVE",
              ],
            },
          },
          S_Unpaid: {
            $push: {
              $cond: [
                { $eq: ["$Status", "Unpaid"] },
                { Unpaid: "$Amount" },
                "$$REMOVE",
              ],
            },
          },
        },
      },
      {
        $project: {
          isAnyTrueU: { $anyElementTrue: ["$S_Unpaid"] },
          isAnyTrueP: { $anyElementTrue: ["$S_Paid"] },
          _id: 1,
          CustomerID: "$_id.CustomerID",
          CustomerName: "$_id.CustomerName",
          Paid: { $arrayElemAt: ["$S_Paid.Paid", 0] },
          Unpaid: { $arrayElemAt: ["$S_Unpaid.Unpaid", 0] },
        },
      },
      {
        $project: {
          CustomerID: 1,
          CustomerName: 1,
          Paid: 1,
          Unpaid: 1,
          Unpaid: {
            $cond: [{ $eq: ["$isAnyTrueU", false] }, 0, { Unpaid: "$Unpaid" }],
          },
          Paid: {
            $cond: [{ $eq: ["$isAnyTrueP", false] }, 0, { Paid: "$Paid" }],
          }
        },
      },
      {
        $project: {
          CustomerID: 1,
          CustomerName: 1,
          Paid: { $cond: [{ $eq: ["$Paid", 0] }, 0, "$Paid.Paid"]},
          Unpaid: { $cond: [{ $eq: ["$Unpaid", 0] }, 0, "$Unpaid.Unpaid"] },
          _id: 0,
        },
      },
      {
        $project: {
          CustomerID: 1,
          CustomerName: 1,
          Paid: 1,
          Unpaid: 1,
          Total: { $sum: ["$Paid", "$Unpaid"] },
          Status: { $cond: [{ $eq: ["$Unpaid", 0] }, "Paid", "Unpaid"] },
        },
      },
    ]);

    res.status(200).json(result);
  } catch (err) {
    res.status(500).json(err.message);
  }
};

--------------------------------------------------------------------------------------------------------------------------



const aggregateBasedOnCustomers = async (req, res) => {
  try {
    const result = await Orders.aggregate([
      {
        $lookup: {
          from: "payments",
          localField: "pay_id",
          foreignField: "_id",
          as: "status",
        },
      },
      {
        $lookup: {
          from: "customer_infos",
          localField: "cid",
          foreignField: "_id",
          as: "customer",
        },
      },
      { $unwind: "$status" },
      { $unwind: "$customer" },
      {
        $project: {
          _id: 0,
          "customer.name": 1,
          "status.cid": 1,
          "status.total": 1,
          "status.pay_status": 1,
        },
      },
      {
        $addFields: {
          CustomerID: "$status.cid",
          CustomerName: "$customer.name",
          Amount: "$status.total",
          Status: "$status.pay_status",
        },
      },
      { $project: { status: 0, customer: 0 } },
      {
        $group: {
          _id: {
            CustomerID: "$CustomerID",
            CustomerName: "$CustomerName",
            Status: "$Status",
          },
          Amount: { $sum: "$Amount" },
        },
      },
      {
        $project: {
          _id: 0,
          CustomerID: "$_id.CustomerID",
          CustomerName: "$_id.CustomerName",
          Status: "$_id.Status",
          Amount: 1,
        },
      },

      {
        $group: {
          _id: { CustomerID: "$CustomerID", CustomerName: "$CustomerName" },
          S_Paid: {
            $push: {
              $cond: [
                { $eq: ["$Status", "Paid"] },
                { Paid: "$Amount" },
                "$$REMOVE",
              ],
            },
          },
          S_Unpaid: {
            $push: {
              $cond: [
                { $eq: ["$Status", "Unpaid"] },
                { Unpaid: "$Amount" },
                "$$REMOVE",
              ],
            },
          },
        },
      },
      {$addFields:{Paid:0,Unpaid:0}},
      {
        $project: {
          CustomerID: "$_id.CustomerID",
          CustomerName: "$_id.CustomerName",
          Paid: { $arrayElemAt: ["$S_Paid.Paid", 0] },
          Unpaid: { $arrayElemAt: ["$S_Unpaid.Unpaid", 0] },
          _id: 0,
        },
      },
      {
        $project: {
          CustomerID: 1,
          CustomerName: 1,
          Paid: 1,
          Unpaid: 1,
          Total: { $sum: ["$Paid", "$Unpaid"] },
          Status: { $cond: [{ $eq: ["$Unpaid", 0] }, "Paid", "Unpaid"] },
        },
      }
    ]);

    res.status(200).json(result);
  } catch (err) {
    res.status(500).json(err.message);
  }
};